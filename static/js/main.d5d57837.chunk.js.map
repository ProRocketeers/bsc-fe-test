{"version":3,"sources":["utils/fetchHelper.ts","utils/useFetch.ts","utils/bscApi.ts","messages.ts","Spinner.tsx","Alert.tsx","noteList.tsx","noteDetail.tsx","noteEditor.tsx","Localizer.tsx","noteCreator.tsx","App.tsx","index.tsx"],"names":["defaultHeaders","Content-Type","fetchHelper","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","setState","state","config","response","data","wrap","_context","prev","next","objectSpread","loading","fetchRequest","sent","ok","json","error","Error","statusText","t0","stop","_x","apply","this","arguments","_ref3","url","_ref3$body","body","_ref3$method","method","fetchConfig","headers","JSON","stringify","fetch","defaultFetchResponse","useFetch","options","useEffect","API_URL","getAllNotes","concat","getNoteDetail","id","updateNote","createNote","removeNote","defineMessages","appbarAppName","defaultMessage","appbarNoteNew","appbarNoteList","noteListNote","noteListEdit","noteListDelete","noteListDeleteError","commonWentWrong","noteEditorLabelNote","noteEditorSave","noteEditorHeader","noteEditorError","noteEditorUpdated","noteDetailEdit","noteCreatorCreated","noteCreatorError","noteCreatorNew","noteCreatorLabelNote","noteCreatorSave","Spinner","react_default","createElement","className","role","Alert","color","children","NoteList","injectIntl","history","formatMessage","intl","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","removeData","setRemoveData","deleteNote","newData","filter","note","messages","nodeId","index_es","colSpan","src_Spinner","src_Alert","map","title","key","Fragment","Link","to","type","onClick","push","NoteDetail","match","params","react","NoteEditor","noteId","noteResponse","setNote","isUpdated","setIsUpdated","assign","values","htmlFor","name","value","onChange","e","target","trim","length","submitChange","LOCALES","en","cs","lsHandler","language","setLocale","locale","localStorage","setItem","getLocale","getItem","getLang","addLocaleData","toConsumableArray","locale_en","locale_cs","Localizer","loc","textComponent","React","NoteCreator","setTitle","message","setMessage","statuses","SAVING","CREATED","ERROR","disabled","abrupt","App","opened","setOpened","ddOpened","setDdOpened","_useState5","_useState6","lang","setLang","src_Localizer","BrowserRouter","basename","process","Route","path","render","href","preventDefault","open","aria-haspopup","ddOpen","aria-expanded","tabIndex","aria-hidden","keys","index","exact","props","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d5d57837.chunk.js","sourcesContent":["import { IUseFetch } from './useFetch';\nimport { IFetchRequestConfig } from './bscApi';\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n};\nexport interface IFetchHelperOptions<TData, TDefaultData> {\n  setState: (args: IUseFetch<TData, any>) => void;\n  state: IUseFetch<TData, TDefaultData>;\n  config: IFetchRequestConfig;\n}\nexport const fetchHelper = async <TData, TDefaultData>({\n  setState,\n  state,\n  config,\n}: IFetchHelperOptions<TData, TDefaultData>) => {\n  setState({ ...state, loading: true });\n  try {\n    const response = await fetchRequest(config);\n\n    if (response.ok) {\n      const data = await response.json();\n      setState({ loading: false, error: null, data });\n    } else {\n      setState({\n        loading: false,\n        error: new Error(response.statusText),\n        data: null,\n      });\n    }\n  } catch (error) {\n    setState({\n      loading: false,\n      error,\n      data: null,\n    });\n  }\n};\n\nexport const fetchRequest = ({\n  url,\n  body = null,\n  method = 'GET',\n}: IFetchRequestConfig): Promise<Response> => {\n  let fetchConfig: RequestInit = {\n    method,\n    headers: defaultHeaders,\n  };\n\n  if (body) {\n    fetchConfig = { ...fetchConfig, body: JSON.stringify(body) };\n  }\n  return fetch(url, fetchConfig);\n};\n","import { useEffect } from 'react';\nimport { fetchHelper, IFetchHelperOptions } from './fetchHelper';\n\nexport interface IUseFetch<TData, TDefaultData = null> {\n  error: Error | null;\n  data: TData | TDefaultData;\n  loading: boolean;\n}\nexport const defaultFetchResponse: IUseFetch<any, null> = {\n  error: null,\n  data: null,\n  loading: false,\n};\n\nexport const useFetch = <TData, TDefaultData = null>(\n  options: IFetchHelperOptions<TData, TDefaultData>\n): void => {\n  const { url } = options.config;\n\n  useEffect(() => {\n    fetchHelper<TData, TDefaultData>(options);\n  }, [url]);\n};\n","const API_URL = 'http://private-9aad-note10.apiary-mock.com';\n\nexport interface IFetchRequestConfig {\n  url: string;\n  body?: any;\n  method?: 'PUT' | 'GET' | 'POST' | 'DELETE';\n}\n\nexport const getAllNotes = (): IFetchRequestConfig => ({\n  url: `${API_URL}/notes`,\n});\n\nexport const getNoteDetail = (id: string): IFetchRequestConfig => ({\n  url: `${API_URL}/notes/${id}`,\n});\n\nexport const updateNote = (id: string, body: any): IFetchRequestConfig => ({\n  url: `${API_URL}/notes/${id}`,\n  method: 'PUT',\n  body,\n});\nexport const createNote = (body: any): IFetchRequestConfig => ({\n  url: `${API_URL}/notes`,\n  method: 'POST',\n  body,\n});\nexport const removeNote = (id: string): IFetchRequestConfig => ({\n  url: `${API_URL}/notes/${id}`,\n  method: 'DELETE',\n});\n","import { defineMessages } from 'react-intl.macro';\n\nexport default defineMessages({\n  appbarAppName: {\n    id: 'appbar.app.name',\n    defaultMessage: \"ProRocketeers' Notes\",\n  },\n  appbarNoteNew: {\n    id: 'appbar.note.new',\n    defaultMessage: 'Create note',\n  },\n  appbarNoteList: {\n    id: 'appbar.note.list',\n    defaultMessage: 'List of notes',\n  },\n  noteListNote: {\n    id: 'note.list.note',\n    defaultMessage: 'Note',\n  },\n  noteListEdit: {\n    id: 'note.list.edit',\n    defaultMessage: 'Edit',\n  },\n  noteListDelete: {\n    id: 'note.list.delete',\n    defaultMessage: 'Delete',\n  },\n  noteListDeleteError: {\n    id: 'note.list.delete.error',\n    defaultMessage: 'Unable to delete note #{nodeId}',\n  },\n  commonWentWrong: {\n    id: 'common.went.wrong',\n    defaultMessage: 'Something went wrong...',\n  },\n  noteEditorLabelNote: {\n    id: 'note.editor.label.note',\n    defaultMessage: 'Note',\n  },\n  noteEditorSave: {\n    id: 'note.editor.save',\n    defaultMessage: 'Save',\n  },\n  noteEditorHeader: {\n    id: 'note.editor.header',\n    defaultMessage: 'Note #{noteId}',\n  },\n  noteEditorError: {\n    id: 'note.editor.error',\n    defaultMessage: 'Error updating note',\n  },\n  noteEditorUpdated: {\n    id: 'note.editor.updated',\n    defaultMessage: 'Note updated',\n  },\n  noteDetailEdit: {\n    id: 'note.detail.edit',\n    defaultMessage: 'Edit',\n  },\n  noteCreatorCreated: {\n    id: 'note.creator.created',\n    defaultMessage: 'Note created',\n  },\n  noteCreatorError: {\n    id: 'note.creator.error',\n    defaultMessage: 'Error saving note',\n  },\n  noteCreatorNew: {\n    id: 'note.creator.new',\n    defaultMessage: 'Create new note',\n  },\n  noteCreatorLabelNote: {\n    id: 'note.creator.label.note',\n    defaultMessage: 'Note',\n  },\n  noteCreatorSave: {\n    id: 'note.creator.save',\n    defaultMessage: 'Save',\n  },\n});\n","import React from 'react';\n\nconst Spinner = (): JSX.Element => (\n  <div className=\"text-center\">\n    <div className=\"spinner-border text-primary bsc-spinner\" role=\"status\" />\n  </div>\n);\n\nexport default Spinner;\n","import React, { ReactChild } from 'react';\n\ntype AlertTypes =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark';\n\nconst Alert = ({\n  color,\n  children,\n}: {\n  color?: AlertTypes;\n  children: ReactChild;\n}): JSX.Element => (\n  <div className={`alert alert-${color || 'primary'}`} role=\"alert\">\n    {children}\n  </div>\n);\n\nexport default Alert;\n","import React, { useState } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, InjectedIntlProps } from 'react-intl';\nimport { IUseFetch, useFetch } from './utils/useFetch';\nimport { INote } from './utils/types';\nimport { getAllNotes, removeNote } from './utils/bscApi';\nimport { fetchRequest } from './utils/fetchHelper';\nimport messages from './messages';\nimport Spinner from './Spinner';\nimport Alert from './Alert';\n\nfunction NoteListComponent({\n  history,\n  intl: { formatMessage },\n}: RouteComponentProps<{}> & InjectedIntlProps): JSX.Element {\n  const [state, setState] = useState<IUseFetch<INote[], INote[]>>({\n    error: null,\n    data: [],\n    loading: false,\n  });\n\n  useFetch<INote[], INote[]>({\n    config: getAllNotes(),\n    state,\n    setState,\n  });\n\n  const [removeData, setRemoveData] = useState<{\n    loading: boolean;\n    error: string | null;\n    id: string | null;\n  }>({ loading: false, error: null, id: null });\n\n  const deleteNote = (id: string) => async () => {\n    setRemoveData({ loading: true, error: null, id });\n    try {\n      await fetchRequest(removeNote(id));\n\n      const newData = state.data.filter(note => note.id !== id);\n      setRemoveData({ loading: false, error: null, id: null });\n\n      setState({ ...state, data: newData });\n    } catch (e) {\n      setRemoveData({\n        loading: false,\n        error: formatMessage(messages.noteListDeleteError, { nodeId: id }),\n        id,\n      });\n    }\n  };\n\n  const { error, loading, data } = state;\n\n  return (\n    <div className=\" table-responsive\">\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <FormattedMessage {...messages.noteListNote} />\n            </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {loading && (\n            <tr>\n              <td colSpan={3} className=\"text-center\">\n                <Spinner />\n              </td>\n            </tr>\n          )}\n          {(error || !data) && !loading && (\n            <tr>\n              <td className=\"text-center\" colSpan={3}>\n                <Alert color=\"danger\">\n                  <FormattedMessage {...messages.commonWentWrong} />\n                </Alert>\n              </td>\n            </tr>\n          )}\n          {data &&\n            data.map(({ id, title }) => (\n              <tr key={id}>\n                {`${removeData.id}` === `${id}` ? (\n                  <td colSpan={3} className=\"text-center\">\n                    {removeData.loading && <Spinner />}\n                    {removeData.error && !removeData.loading && (\n                      <Alert color=\"danger\">\n                        {removeData.error}\n                      </Alert>\n                    )}\n                  </td>\n                ) : (\n                  <>\n                    <td>{id}</td>\n                    <td>\n                      <Link to={`/note/detail/${id}`}>{title}</Link>\n                    </td>\n                    <td className=\"text-right\">\n                      <div className=\"btn-group btn-group-sm\" role=\"group\">\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-primary\"\n                          onClick={() => history.push(`/note/edit/${id}`)}\n                        >\n                          <FormattedMessage {...messages.noteListEdit} />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-danger\"\n                          onClick={deleteNote(id)}\n                        >\n                          <FormattedMessage {...messages.noteListDelete} />\n                        </button>\n                      </div>\n                    </td>\n                  </>\n                )}\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport const NoteList = injectIntl(NoteListComponent);\n","import * as React from 'react';\nimport { defaultFetchResponse, IUseFetch, useFetch } from './utils/useFetch';\nimport { INote } from './utils/types';\nimport { RouteChildrenProps } from 'react-router';\nimport { useState } from 'react';\nimport { getNoteDetail } from './utils/bscApi';\nimport { FormattedMessage } from 'react-intl';\nimport messages from './messages';\nimport Spinner from './Spinner';\nimport Alert from './Alert';\n\nexport function NoteDetail({\n  match,\n  history,\n}: RouteChildrenProps<{ id: string }>): JSX.Element {\n  const [state, setState] = useState<IUseFetch<INote>>(defaultFetchResponse);\n\n  const id: string = match ? match.params.id : '';\n\n  useFetch({ state, setState, config: getNoteDetail(id) });\n\n  const { loading, error, data } = state;\n  if (error) {\n    return (\n      <Alert color=\"danger\">\n        <FormattedMessage {...messages.commonWentWrong} />\n      </Alert>\n    );\n  }\n  if (loading || !data) {\n    return <Spinner />;\n  }\n\n  return (\n    <div>\n      <h1>{data.title}</h1>\n      <div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary btn-sm\"\n          onClick={() => {\n            history.push(`/note/edit/${id}`);\n          }}\n        >\n          <FormattedMessage {...messages.noteDetailEdit} />\n        </button>\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { defaultFetchResponse, IUseFetch, useFetch } from './utils/useFetch';\nimport { getNoteDetail, updateNote } from './utils/bscApi';\nimport { INote } from './utils/types';\nimport { RouteChildrenProps } from 'react-router';\nimport { ChangeEvent, useState } from 'react';\nimport { fetchHelper } from './utils/fetchHelper';\nimport { FormattedMessage } from 'react-intl';\nimport messages from './messages';\nimport Spinner from './Spinner';\nimport Alert from './Alert';\n\nexport function NoteEditor({\n  match,\n}: RouteChildrenProps<{ id: string }>): JSX.Element {\n  const noteId = match ? match.params.id : '';\n  const [noteResponse, setNote] = useState<IUseFetch<INote>>(\n    defaultFetchResponse\n  );\n  const [isUpdated, setIsUpdated] = useState(false);\n\n  useFetch<INote>({\n    config: getNoteDetail(noteId),\n    state: noteResponse,\n    setState: setNote,\n  });\n\n  const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (noteResponse.data) {\n      setNote({\n        ...noteResponse,\n        data: { ...noteResponse.data, title: e.target.value },\n      });\n    }\n  };\n\n  const submitChange = ({ id, title }: INote) => {\n    if (title.trim().length === 0) {\n      return false;\n    }\n    setIsUpdated(true);\n    fetchHelper({\n      config: updateNote(`${id}`, { id, title }),\n      state: noteResponse,\n      setState: setNote,\n    });\n  };\n\n  const { loading, data, error } = noteResponse;\n\n  if ((loading && !isUpdated) || !data) {\n    return (\n      <div className=\"text-center\">\n        <Spinner />\n      </div>\n    );\n  }\n  if (error && !isUpdated) {\n    return (\n      <Alert color=\"danger\">\n        <FormattedMessage {...messages.commonWentWrong} />\n      </Alert>\n    );\n  }\n\n  return (\n    <form>\n      <h1>\n        <FormattedMessage\n          {...messages.noteEditorHeader}\n          values={{ noteId: data.id }}\n        />\n      </h1>\n\n      {isUpdated && error && (\n        <Alert color=\"danger\">\n          <FormattedMessage {...messages.noteEditorError} />\n        </Alert>\n      )}\n      {isUpdated && !loading && !error && (\n        <Alert color=\"success\">\n          <FormattedMessage {...messages.noteEditorUpdated} />\n        </Alert>\n      )}\n      <div className=\"form-group bsc-container\">\n        <label htmlFor=\"note\">\n          <FormattedMessage {...messages.noteEditorLabelNote} />\n        </label>\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          name=\"note\"\n          id=\"note\"\n          value={(data && data.title) || ''}\n          onChange={changeTitleHandler}\n        />\n      </div>\n      {isUpdated && loading ? (\n        <Spinner />\n      ) : (\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => submitChange(data)}\n        >\n          <FormattedMessage {...messages.noteEditorSave} />\n        </button>\n      )}\n    </form>\n  );\n}\n","import React from \"react\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\nimport cs from \"./translates/cs.json\";\nimport en from \"./translates/en.json\";\nimport locale_cs from \"react-intl/locale-data/cs\";\nimport locale_en from \"react-intl/locale-data/en\";\n\nexport const DEFAULT_LOCALE = 'en';\n\ninterface ILocales {\n  [T: string]: string;\n}\nexport const LOCALES: ILocales = {\n  'en': 'English',\n  'cs': 'Česky',\n}\n\nconst lsHandler = {\n  language: 'language',\n\n  setLocale: (locale: string): void => {\n    localStorage.setItem(lsHandler.language, locale);\n  },\n\n  getLocale: (): string | null => {\n    return localStorage.getItem(lsHandler.language);\n  },\n};\n\nexport const getLang = (): string => lsHandler.getLocale() || DEFAULT_LOCALE;\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype ExtendedProps = Props & {\n  locale?: string;\n};\n\ninterface IMessages {\n  [T: string]: object;\n}\nconst messages: IMessages = {\n  en,\n  cs\n};\n\naddLocaleData([...locale_en, ...locale_cs]);\n\nconst Localizer = ({\n  children,\n  locale,\n}: ExtendedProps): JSX.Element => {\n  if (locale) {\n    lsHandler.setLocale(locale);\n  }\n  const loc = locale || getLang();\n  return (\n    <IntlProvider\n      locale={loc}\n      messages={messages[loc]}\n      textComponent={React.Fragment}\n    >\n      {children}\n    </IntlProvider>\n  );\n};\n\nexport default Localizer;","import * as React from 'react';\nimport { createNote } from './utils/bscApi';\nimport { fetchRequest } from './utils/fetchHelper';\nimport { useState } from 'react';\nimport { ChangeEvent } from 'react';\nimport { FormattedMessage, injectIntl, InjectedIntlProps } from 'react-intl';\nimport messages from './messages';\nimport Spinner from './Spinner';\nimport Alert from './Alert';\n\nfunction NoteCreatorComponent({\n  intl: { formatMessage },\n}: InjectedIntlProps): JSX.Element {\n  const [title, setTitle] = useState('');\n  const [message, setMessage] = useState('');\n  const statuses = {\n    SAVING: 'SAVING',\n    CREATED: formatMessage(messages.noteCreatorCreated),\n    ERROR: formatMessage(messages.noteCreatorError),\n  };\n\n  const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n  const submitChange = (title: string) => async () => {\n    if (title.trim().length === 0) {\n      return false;\n    }\n    setMessage(statuses.SAVING);\n    try {\n      await fetchRequest(createNote({ title }));\n      setMessage(statuses.CREATED);\n    } catch (e) {\n      setMessage(statuses.ERROR);\n    }\n  };\n\n  return (\n    <form>\n      <h1>\n        <FormattedMessage {...messages.noteCreatorNew} />\n      </h1>\n      {message === statuses.SAVING ? (\n        <Spinner />\n      ) : (\n        <>\n          {message === statuses.ERROR && (\n            <Alert color=\"danger\">\n              {message}\n            </Alert>\n          )}\n          {message === statuses.CREATED && (\n            <Alert color=\"success\">\n              {message}\n            </Alert>\n          )}\n          <div className=\"form-group bsc-container\">\n            <label htmlFor=\"note\">\n              <FormattedMessage {...messages.noteCreatorLabelNote} />\n            </label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"note\"\n              id=\"note\"\n              value={title}\n              onChange={changeTitleHandler}\n              disabled={message === statuses.CREATED}\n            />\n          </div>\n          {message !== statuses.CREATED && (\n            <button\n              type=\"button\"\n              onClick={submitChange(title)}\n              className=\"btn btn-primary\"\n            >\n              <FormattedMessage {...messages.noteCreatorSave} />\n            </button>\n          )}\n        </>\n      )}\n    </form>\n  );\n}\n\nexport const NoteCreator = injectIntl(NoteCreatorComponent);\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport './App.css';\nimport { NoteList } from './noteList';\nimport { NoteDetail } from './noteDetail';\nimport { NoteEditor } from './noteEditor';\nimport Localizer, { getLang, LOCALES } from './Localizer';\nimport messages from './messages';\nimport { NoteCreator } from './noteCreator';\n\n// since we deploy to github pages, router basename must be set\n\nconst routeBasename = process.env.PUBLIC_URL || '';\n\nconst App = (): JSX.Element => {\n  const [opened, setOpened] = useState(false);\n  const [ddOpened, setDdOpened] = useState(false);\n  const [lang, setLang] = useState(getLang());\n  return (\n    <Localizer locale={lang}>\n      <Router basename={routeBasename}>\n        <>\n          <Route\n            path=\"*\"\n            render={({ history }) => (\n              <nav className=\"navbar navbar-expand-md navbar-dark bg-secondary\">\n                <a\n                  href=\"/\"\n                  className=\"navbar-brand\"\n                  onClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    history.push('/');\n                  }}\n                >\n                  <FormattedMessage {...messages.appbarAppName} />\n                </a>\n                <button\n                  type=\"button\"\n                  className=\"navbar-toggler\"\n                  onClick={() => {\n                    setOpened(open => !open);\n                  }}\n                >\n                  <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className={`${opened ? '' : 'collapse'} navbar-collapse`}>\n                  <ul className=\"ml-auto navbar-nav\">\n                    <li className=\"nav-item\">\n                      <a\n                        href=\"/\"\n                        className=\"nav-link\"\n                        onClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                          e.preventDefault();\n                          history.push('/');\n                        }}\n                      >\n                        <FormattedMessage {...messages.appbarNoteList} />\n                      </a>\n                    </li>\n                    <li className=\"nav-item\">\n                      <a\n                        href=\"/\"\n                        className=\"nav-link\"\n                        onClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                          e.preventDefault();\n                          history.push('/create-note');\n                        }}\n                      >\n                        <b>\n                          <FormattedMessage {...messages.appbarNoteNew} />\n                        </b>\n                      </a>\n                    </li>\n                    <li className=\"dropdown nav-item\">\n                      <a\n                        aria-haspopup=\"true\"\n                        href=\"/\"\n                        onClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                          e.preventDefault();\n                          setDdOpened(ddOpen => !ddOpen);\n                        }}\n                        className=\"dropdown-toggle nav-link\"\n                        aria-expanded={ddOpened}\n                      >\n                        {LOCALES[lang]}\n                      </a>\n                      <div\n                        tabIndex={-1}\n                        role=\"menu\"\n                        aria-hidden={!ddOpened}\n                        className={`dropdown-menu dropdown-menu-right ${ddOpened &&\n                          'show'}`}\n                      >\n                        {Object.keys(LOCALES).map((locale, index) => (\n                          <button\n                            type=\"button\"\n                            disabled={lang === locale}\n                            key={locale}\n                            tabIndex={index - 1}\n                            className={`${lang === locale &&\n                              'disabled'} dropdown-item`}\n                            onClick={() => {\n                              setLang(locale);\n                              setDdOpened(false);\n                            }}\n                          >\n                            {LOCALES[locale]}\n                          </button>\n                        ))}\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </nav>\n            )}\n          />\n          <div className=\"container bsc-container\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <Route\n                  exact\n                  path=\"/\"\n                  render={props => <NoteList {...props} />}\n                />\n                <Route\n                  path=\"/note/detail/:id\"\n                  render={props => <NoteDetail {...props} />}\n                />\n                <Route\n                  path=\"/note/edit/:id\"\n                  render={props => <NoteEditor {...props} />}\n                />\n                <Route path=\"/create-note\" render={() => <NoteCreator />} />\n              </div>\n            </div>\n          </div>\n        </>\n      </Router>\n    </Localizer>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}